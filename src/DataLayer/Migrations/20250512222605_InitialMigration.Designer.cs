// <auto-generated />
using System;
using DataLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250512222605_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArticleId"));

                    b.Property<string>("ArticleMarkdown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.HasKey("ArticleId");

                    b.HasIndex("StepId")
                        .IsUnique();

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.Challenge", b =>
                {
                    b.Property<int>("ChallengeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChallengeId"));

                    b.Property<string>("BriefMarkdown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DesktopPreviewImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MobilePreviewImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SolutionBaseRepository")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.Property<string>("SuggestionMarkdown")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ChallengeId");

                    b.HasIndex("StepId")
                        .IsUnique();

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.LearningPath", b =>
                {
                    b.Property<int>("LearningPathId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LearningPathId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Order")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LearningPathId");

                    b.ToTable("LearningPaths");
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.Step", b =>
                {
                    b.Property<int>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StepId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LearningPathId")
                        .HasColumnType("integer");

                    b.Property<float>("Order")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StepId");

                    b.HasIndex("LearningPathId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.StepProgress", b =>
                {
                    b.Property<int>("StepProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StepProgressId"));

                    b.Property<float>("Completion")
                        .HasColumnType("real");

                    b.Property<float>("Order")
                        .HasColumnType("real");

                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("StepProgressId");

                    b.HasIndex("StepId")
                        .IsUnique();

                    b.ToTable("StepProgresses");
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.Article", b =>
                {
                    b.HasOne("WebBro.DataLayer.EfClasses.Step", null)
                        .WithOne("Article")
                        .HasForeignKey("WebBro.DataLayer.EfClasses.Article", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.Challenge", b =>
                {
                    b.HasOne("WebBro.DataLayer.EfClasses.Step", null)
                        .WithOne("Challenge")
                        .HasForeignKey("WebBro.DataLayer.EfClasses.Challenge", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.Step", b =>
                {
                    b.HasOne("WebBro.DataLayer.EfClasses.LearningPath", null)
                        .WithMany("Steps")
                        .HasForeignKey("LearningPathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.StepProgress", b =>
                {
                    b.HasOne("WebBro.DataLayer.EfClasses.Step", null)
                        .WithOne("StepProgress")
                        .HasForeignKey("WebBro.DataLayer.EfClasses.StepProgress", "StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.LearningPath", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("WebBro.DataLayer.EfClasses.Step", b =>
                {
                    b.Navigation("Article");

                    b.Navigation("Challenge");

                    b.Navigation("StepProgress");
                });
#pragma warning restore 612, 618
        }
    }
}
